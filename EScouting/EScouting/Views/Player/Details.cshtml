@using Microsoft.AspNet.Identity
@model EScouting.Models.SummonerViewModel
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var list = Model.matches.GroupBy(x => x.ChampionId).OrderByDescending(x => x.Count()).Take(5);
}
@if (list.Count() <= 4 || Model.matches == null)
{
    <h2>not enough matches played to show status</h2>
}
else
{


    // we got data!
    var color = "white";
    var EP = Model.EP;
    if (EP >= 2)
    {
        color = "white";
    }
    if (EP >= 4.9)
    {
        color = "yellow";
    }
    if (EP >= 7)
    {
        color = "orange";
    }
    if (EP >= 9)
    {
        color = "red";
    }

    if (Request.IsAuthenticated)
    {
        if (!Model.Invitations.Where(u => u.FromId == User.Identity.GetUserId() && u.ToId == Model.UserId).Any())
        {
            var user = Model.Users.SingleOrDefault(u => u.Id == User.Identity.GetUserId());
            if (user.UserTypeId != 1)
            {
                using (Html.BeginForm("InviteToClub", "Player", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.HiddenFor(x => x.coachId, new { @Value = User.Identity.GetUserId() });
                    @Html.HiddenFor(x => x.UserId);
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" class="btn btn-invite" value="Invite To Club" />
                        </div>
                    </div>
                }
            }
        }
    }

    <p class="player-name">@Model.SummonerName<span class="small-span" style="color:@color">    (@Model.EP.ToString("#.#") EP)</span></p>



    if (Model.SoloQueue != null)
    {
        <table class="table table-details table-hover">
            <thead>
                <tr>
                    <th class="rank">Solo Ranked</th>
                    <th>Tier</th>
                    <th>Rank</th>
                    <th>Points</th>
                    <th>Wins</th>
                    <th>Losses</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td></td>
                    <td>@Model.SoloQueue.Tier</td>
                    <td>@Model.SoloQueue.Rank</td>
                    <td>@Model.SoloQueue.LeaguePoints</td>
                    <td>@Model.SoloQueue.Wins</td>
                    <td>@Model.SoloQueue.Losses</td>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <h2>solo queue rank unavailable</h2>
    }
    if (Model.FlexQueue != null)
    {
        <table class="table table-details table-hover">
            <thead>
                <tr>
                    <th class="rank">Flex Ranked</th>
                    <th>Tier</th>
                    <th>Rank</th>
                    <th>Points</th>
                    <th>Wins</th>
                    <th>Losses</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td></td>
                    <td>@Model.FlexQueue.Tier</td>
                    <td>@Model.FlexQueue.Rank</td>
                    <td>@Model.FlexQueue.LeaguePoints</td>
                    <td>@Model.FlexQueue.Wins</td>
                    <td>@Model.FlexQueue.Losses</td>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <h2 class="rank">Flex queue rank unavailable</h2>
    }

    // 2 dimentional array { champ id, kills, deaths, assists, minionskilled, visionScore }
    int[,] topArray = new int[5, 6]
    {
{list.ElementAt(0).Key, 0, 0, 0, 0, 0 },
{list.ElementAt(1).Key, 0, 0, 0, 0, 0 },
{list.ElementAt(2).Key, 0, 0, 0, 0, 0 },
{list.ElementAt(3).Key, 0, 0, 0, 0, 0 },
{list.ElementAt(4).Key, 0, 0, 0, 0, 0 }
    };
    var d = 0;

    if (Model.matches.Any())
    {
        <p class="text-center title">Top champs</p>
        foreach (var champ in Model.matches)
        {
            if (list.Where(x => x.Key == champ.ChampionId) != null)
            {
                for (var i = 0; i < topArray.GetLength(0); i++)
                {
                    if (topArray[i, 0] == champ.ChampionId)
                    {
                        topArray[i, 1] += champ.Kills;
                        topArray[i, 2] += champ.Deaths;
                        topArray[i, 3] += champ.Assists;
                        topArray[i, 4] += champ.TotalMinionsKilled;
                        topArray[i, 5] += champ.VisionScore;
                    }
                }
            }
        }

        foreach (var item in list)
        {

            var champ = Model.Champions.SingleOrDefault(c => c.Id == item.Key);
            var champImg = champ.Name + ".png";
            float aKills = (float)topArray[d, 1] / item.Count();
            float aDeaths = (float)topArray[d, 2] / item.Count();
            float aAssists = (float)topArray[d, 3] / item.Count();
            float aMinionsKilled = (float)topArray[d, 4] / item.Count();
            float aVision = (float)topArray[d, 5] / item.Count();

            <table class="table table-champs table-hover">
                <thead>
                    <tr>
                        <th><img class="champ-img" src="~/Content/Images/ChampionIcons/@champImg" /></th>
                        <th>Average Kills</th>
                        <th>Average Deaths</th>
                        <th>Average Assists</th>
                        <th>Average CS</th>
                        <th>Average Vision Score</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@champ.Name</td>
                        <td>@aKills.ToString("#.#")</td>
                        <td>@aDeaths.ToString("#.#")</td>
                        <td>@aAssists.ToString("#.#")</td>
                        <td>@aMinionsKilled.ToString("#.#")</td>
                        <td>@aVision.ToString("#.#")s</td>
                    </tr>
                </tbody>
            </table>

            d++;
        }
    }
    else
    {
        <p>no games played</p>
    }
}
